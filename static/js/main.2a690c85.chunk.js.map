{"version":3,"sources":["components/ImageSelection.tsx","components/ImagePreview.tsx","components/HSLPlot.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ImageSelection","props","handleFileChange","bind","handleURLChange","handlePaste","document","addEventListener","e","clipboardData","items","i","length","item","type","indexOf","blob","getAsFile","this","onChange","event","target","files","value","className","id","htmlFor","React","Component","ImagePreview","state","img_src","loadImage","imageFile","data","Event","onError","HTMLImageElement","alert","setState","toDataURL","canvas","role","src","style","maxWidth","RGBToHSL","r","g","b","l","cmin","Math","min","cmax","max","delta","h","abs","HSLPlot","x","y","z","colors","analyzeImage","maxHeight","imageCanvas","ctx","getContext","pixels","getImageData","width","height","xs","ys","zs","s","console","log","angle","PI","radius","sqrt","sin","cos","push","mode","marker","color","size","layout","scene","xaxis","range","yaxis","zaxis","aspectmode","autosize","margin","t","useResizeHandler","NavBar","App","imageKey","errorMessage","handleImageChange","handleError","bsCustomFileInput","init","result","key","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2a690c85.chunk.js","sourcesContent":["import React, { ChangeEvent } from 'react';\nimport loadImage from 'blueimp-load-image';\nimport { FileBlobOrURL } from '../Types';\n\ninterface Props {\n  onChange: (imageFile: FileBlobOrURL | null) => void;\n}\n\nclass ImageSelection extends React.Component<Props> {\n  constructor(props: any){\n    super(props);\n\n    this.handleFileChange = this.handleFileChange.bind(this);\n    this.handleURLChange = this.handleURLChange.bind(this);\n    this.handlePaste = this.handlePaste.bind(this);\n  \n    document.addEventListener('paste', this.handlePaste);\n  }\n  \n  // https://ourcodeworld.com/articles/read/491/how-to-retrieve-images-from-the-clipboard-with-javascript-in-the-browser\n  handlePaste(e: ClipboardEvent) {\n    if (e.clipboardData === null) {\n      return;\n    }\n\n    const items = e.clipboardData.items;\n    for (let i = 0; i < items.length; ++i) {\n      const item = items[i];\n      if (item.type.indexOf(\"image\") == -1) {\n          continue;\n      }\n      let blob = item.getAsFile();\n      this.props.onChange(blob);\n      return;\n    }\n  }\n\n  handleFileChange(event: any) {\n    this.props.onChange(event.target.files[0])\n  }\n\n  handleURLChange(event: any) {\n    this.props.onChange(event.target.value);\n  }\n\n  render() {\n    return (\n      <form>\n        {/*\n        <div className=\"form-group\">\n          <input id=\"url\" type=\"url\" placeholder=\"URL\" className=\"form-control\" onChange={this.handleURLChange} />\n        </div>\n        */}\n        <div className=\"form-group custom-file\">\n          <input id=\"imageFile\" type=\"file\" className=\"custom-file-input\" onChange={this.handleFileChange} />\n          <label className=\"custom-file-label\" htmlFor=\"imageFile\">Select an image file</label>\n        </div>\n        <div className=\"mt-2\">\n        {/*or <strong>drag & drop</strong> an image file, <br />*/}\n        or <strong>paste</strong> an image <small>(<strong>Ctrl+V</strong> or <strong>âŒ˜+V</strong>)</small>.\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default ImageSelection;\n","import React, { ChangeEvent } from 'react';\nimport loadImage from 'blueimp-load-image';\nimport { FileBlobOrURL } from '../Types'\n\ninterface Props {\n    imageFile: FileBlobOrURL;\n    onError: (errorMessage: string) => void;\n}\n\ninterface State {\n    img_src: string | null;\n}\n\nclass ImagePreview extends React.Component<Props, State>  {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      img_src: null,\n    };\n\n    loadImage(\n        props.imageFile,\n        (data) => {\n            if (data instanceof Event) {\n              this.props.onError(\"Loading image file failed\");\n            } else if (data instanceof HTMLImageElement) {\n              alert('image!');\n            } else {\n              this.setState({img_src: data.toDataURL()});\n            }\n        },\n        {\n            // maxWidth: \"600\",\n            canvas: true,\n        }\n    );\n  }\n  \n  render() {\n    if (this.state.img_src === null) {\n        return <div className=\"d-flex justify-content-center\">\n        <div className=\"spinner-border\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </div>\n      </div>\n      ;\n    } else {\n        return <img src={this.state.img_src} style={{ maxWidth: \"100%\" }} className=\"d-block mx-auto\" />\n    }\n  }\n}\n\nexport default ImagePreview;\n","import React, { ChangeEvent } from 'react';\nimport loadImage from 'blueimp-load-image';\nimport Plot from 'react-plotly.js';\nimport { FileBlobOrURL } from '../Types';\n\ninterface Props {\n    imageFile: FileBlobOrURL;\n    onError: (errorMessage: string) => void;\n}\n\ninterface State {\n    x: number[];\n    y: number[];\n    z: number[];\n    colors: string[];\n}\n\nconst RGBToHSL = (r: number, g: number, b: number) => {\n    // https://css-tricks.com/converting-color-spaces-in-javascript/\n    // Make r, g, and b fractions of 1\n    r /= 255;\n    g /= 255;\n    b /= 255;\n  \n    // Find greatest and smallest channel values\n    let cmin = Math.min(r,g,b),\n        cmax = Math.max(r,g,b),\n        delta = cmax - cmin,\n        h = 0,\n        s = 0,\n        l = 0;\n\n    // Calculate hue\n    // No difference\n    if (delta == 0)\n        h = 0;\n    // Red is max\n    else if (cmax == r)\n        h = ((g - b) / delta) % 6;\n    // Green is max\n    else if (cmax == g)\n        h = (b - r) / delta + 2;\n    // Blue is max\n    else\n        h = (r - g) / delta + 4;\n\n    h = h * 60;\n        \n    // Make negative hues positive behind 360Â°\n    if (h < 0)\n        h += 360;\n\n// Calculate lightness\n    l = (cmax + cmin) / 2;\n\n    // Calculate saturation\n    s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n\n    return [h, s, l]\n}\n  \n\nclass HSLPlot extends React.Component<Props, State>  {\n  constructor(props: Props){\n    super(props);\n    this.state = {\n      x: [], y: [], z: [],\n      colors: [],\n    };\n\n    loadImage(\n        props.imageFile,\n        (data) => {\n            if (data instanceof Event) {\n              this.props.onError(\"Loading image file failed\");\n            } else if (data instanceof HTMLImageElement) {\n              alert('image!');\n            } else {\n              // this.setState({img_src: data.toDataURL()});\n              this.analyzeImage(data);\n            }\n        },\n        {\n            maxWidth: 100,\n            maxHeight: 100,\n            canvas: true,\n        }\n    );\n  }\n\n  analyzeImage(imageCanvas: HTMLCanvasElement) {\n    const ctx = imageCanvas.getContext('2d');\n    if (ctx === null) {\n        alert('error');\n        return;\n    }\n    const pixels = ctx.getImageData(0, 0, imageCanvas.width, imageCanvas.height).data;\n    let xs = [], ys = [], zs = [], colors = [];\n    for (let i = 0; i < pixels.length; i += 4) {\n        const [r, g, b] = [pixels[i], pixels[i + 1], pixels[i + 2]];\n        const [h, s, l] = RGBToHSL(r, g, b);\n        //console.log(r, g, b);\n\n        const z = l - 0.5;\n        console.log(h);\n        const angle = h / 180 * Math.PI;\n        const radius = Math.sqrt(0.5 ** 2 - z ** 2) * s;\n        const x = Math.sin(angle) * radius;\n        const y = Math.cos(angle) * radius;\n\n        xs.push(x);\n        ys.push(y);\n        zs.push(z);\n\n        /*\n        xs.push(r);\n        ys.push(g);\n        zs.push(b);\n        */\n        colors.push(`rgb(${r}, ${g}, ${b})`)\n    }\n    this.setState({\n        x: xs,\n        y: ys,\n        z: zs,\n        colors: colors,\n    })\n  }\n  \n  // https://codepen.io/nicolaskruchten/pen/ERgBZX\n  render() {\n    if (this.state.x.length == 0) {\n      return <div className=\"d-flex justify-content-center\">\n      <div className=\"spinner-border\" role=\"status\">\n      <span className=\"sr-only\">Loading...</span>\n    </div>\n    </div>\n    ;\n    } else {\n      return (\n          <Plot\n            data={[\n              {\n                x: this.state.x,\n                y: this.state.y,\n                z: this.state.z,\n                type: 'scatter3d',\n                mode: 'markers',\n                marker: {color: this.state.colors, size: 3},\n              },\n            ]}\n            layout={ {\n              /*\n              xaxis: {range: [-0.5, 0.5] },\n              */\n            scene: {\n            xaxis: {range: [-0.5, 0.5]},\n            yaxis: {range: [-0.5, 0.5]},\n            zaxis: {range: [-0.5, 0.5]},\n            aspectmode: \"cube\",\n            },\n              autosize: true, /*width: 600, height: 600*/\n              margin: {\n                l: 0,\n                r: 0,\n                b: 0,\n                t: 0\n                } \n            }}\n            useResizeHandler={true}\n            style={{\n              width: \"100%\"\n            }}\n          />\n        );\n    }\n  }\n}\n\nexport default HSLPlot;\n","import React from 'react';\nimport bsCustomFileInput from 'bs-custom-file-input';\n\nimport logo from './logo.svg';\nimport './App.css';\nimport ImageSelection from './components/ImageSelection'\nimport ImagePreview from './components/ImagePreview'\nimport HSLPlot from './components/HSLPlot'\nimport { FileBlobOrURL } from './Types'\n\nconst NavBar = () => {\n  // view-source:https://bs-custom-file-input.netlify.com/\n  return <div className=\"App\">\n    <nav className=\"navbar navbar-expand navbar-dark bg-dark text-white\">\n      <div className=\"container\">\n        <h1 className=\"mb-0 h5 py-1\">Image Color 3D</h1>\n      </div>\n    </nav>\n    </div>\n};\n\ninterface Props {\n}\n\ninterface State {\n  imageFile: FileBlobOrURL | null;\n  imageKey: number;\n  errorMessage: string | null;\n}\n\nclass App extends React.Component<Props, State>  {\n  constructor(props: Props){\n    super(props);\n    this.state = {\n      imageFile: null,\n      imageKey: 0,\n      errorMessage: null,\n    };\n\n    this.handleImageChange = this.handleImageChange.bind(this);\n    this.handleError = this.handleError.bind(this);\n  }\n\n  componentDidMount() {\n    bsCustomFileInput.init()\n  }\n\n  handleImageChange(imageFile: FileBlobOrURL | null) {\n    if (imageFile === null) {\n      this.setState({\n        imageFile: null,\n        errorMessage: null,\n      })\n      return;\n    }\n    this.setState({\n      imageFile: imageFile,\n      imageKey: this.state.imageKey + 1,\n      errorMessage: null,\n    });\n  }\n\n  handleError(errorMessage: string) {\n    this.setState({\n      errorMessage: errorMessage,\n    });\n  }\n\n  render() {\n    let result;\n    if (this.state.errorMessage) {\n      result = <div className=\"alert alert-danger mt-5\" role=\"alert\">\n        { this.state.errorMessage }\n      </div>;\n    } else if (this.state.imageFile) {\n      result = <div className=\"row mt-5\">\n        <div className=\"col-md-12 col-lg-6\">\n          <HSLPlot key={this.state.imageKey} imageFile={this.state.imageFile} onError={this.handleError} />\n        </div>\n        <div className=\"col-md-12 col-lg-6\">\n          <ImagePreview key={this.state.imageKey} imageFile={this.state.imageFile} onError={this.handleError}/>\n        </div>\n      </div>;\n    } else {\n      result = null;\n    }\n\n    return (\n      <div>\n        <NavBar />\n        <div className=\"container flex-grow-1 flex-shrink-0 mt-5\">\n          <div className=\"row\">\n            <div className=\"col-sm-12\">\n              <ImageSelection onChange={this.handleImageChange} />\n            </div>\n          </div>\n          { result }\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}