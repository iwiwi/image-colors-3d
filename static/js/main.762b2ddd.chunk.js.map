{"version":3,"sources":["components/ImageSelection.tsx","components/ImagePreview.tsx","components/HSLPlot.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ImageSelection","props","handleFileChange","bind","handleURLChange","handlePaste","document","addEventListener","e","clipboardData","items","i","length","item","type","indexOf","blob","getAsFile","this","onChange","event","target","files","value","className","id","htmlFor","React","Component","ImagePreview","state","imgSrc","loadImage","imageFile","data","Event","onError","HTMLImageElement","alert","setState","toDataURL","canvas","role","src","style","maxWidth","alt","rgbToHSL","r","g","b","l","cmin","Math","min","cmax","max","delta","h","abs","hslToRGB","s","c","x","m","round","hslToXYZ","z","angle","PI","radius","sqrt","sin","cos","HSLPlot","y","colors","analyzeImage","maxHeight","imageCanvas","ctx","getContext","pixels","getImageData","width","height","xs","ys","zs","push","cs","generateHueGuideLine","mode","marker","color","size","line","layout","showlegend","scene","xaxis","range","yaxis","zaxis","aspectmode","autosize","margin","t","useResizeHandler","href","NavBar","App","imageKey","errorMessage","handleImageChange","handleError","bsCustomFileInput","init","result","key","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.762b2ddd.chunk.js","sourcesContent":["import React from \"react\";\nimport { FileBlobOrURL } from \"../Types\";\n\ninterface Props {\n  onChange: (imageFile: FileBlobOrURL | null) => void;\n}\n\nclass ImageSelection extends React.Component<Props> {\n  constructor(props: any) {\n    super(props);\n\n    this.handleFileChange = this.handleFileChange.bind(this);\n    this.handleURLChange = this.handleURLChange.bind(this);\n    this.handlePaste = this.handlePaste.bind(this);\n\n    document.addEventListener(\"paste\", this.handlePaste);\n  }\n\n  // https://ourcodeworld.com/articles/read/491/how-to-retrieve-images-from-the-clipboard-with-javascript-in-the-browser\n  handlePaste(e: ClipboardEvent) {\n    if (e.clipboardData === null) {\n      return;\n    }\n\n    const items = e.clipboardData.items;\n    // tslint:disable-next-line\n    for (let i = 0; i < items.length; ++i) {\n      const item = items[i];\n      if (item.type.indexOf(\"image\") === -1) {\n        continue;\n      }\n      const blob = item.getAsFile();\n      this.props.onChange(blob);\n      return;\n    }\n  }\n\n  handleFileChange(event: any) {\n    this.props.onChange(event.target.files[0]);\n  }\n\n  handleURLChange(event: any) {\n    this.props.onChange(event.target.value);\n  }\n\n  render() {\n    return (\n      <form>\n        {/*\n        <div className=\"form-group\">\n          <input id=\"url\" type=\"url\" placeholder=\"URL\" className=\"form-control\" onChange={this.handleURLChange} />\n        </div>\n        */}\n        <div className=\"form-group custom-file\">\n          <input\n            id=\"imageFile\"\n            type=\"file\"\n            className=\"custom-file-input\"\n            onChange={this.handleFileChange}\n          />\n          <label className=\"custom-file-label\" htmlFor=\"imageFile\">\n            Select an image file\n          </label>\n        </div>\n        <div className=\"mt-2\">\n          {/*or <strong>drag & drop</strong> an image file, <br />*/}\n          or <strong>paste</strong> an image{\" \"}\n          <small>\n            (<strong>Ctrl+V</strong> or <strong>âŒ˜+V</strong>)\n          </small>\n          .\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default ImageSelection;\n","import React from \"react\";\nimport loadImage from \"blueimp-load-image\";\nimport { FileBlobOrURL } from \"../Types\";\n\ninterface Props {\n  imageFile: FileBlobOrURL;\n  onError: (errorMessage: string) => void;\n}\n\ninterface State {\n  imgSrc: string | null;\n}\n\nclass ImagePreview extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      imgSrc: null\n    };\n\n    loadImage(\n      props.imageFile,\n      data => {\n        if (data instanceof Event) {\n          this.props.onError(\"Loading image file failed\");\n        } else if (data instanceof HTMLImageElement) {\n          alert(\"image!\");\n        } else {\n          this.setState({ imgSrc: data.toDataURL() });\n        }\n      },\n      {\n        canvas: true\n      }\n    );\n  }\n\n  render() {\n    if (this.state.imgSrc === null) {\n      return (\n        <div className=\"d-flex justify-content-center\">\n          <div className=\"spinner-border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <img\n          src={this.state.imgSrc}\n          style={{ maxWidth: \"100%\" }}\n          className=\"d-block mx-auto\"\n          alt=\"preview\"\n        />\n      );\n    }\n  }\n}\n\nexport default ImagePreview;\n","import React from \"react\";\nimport loadImage from \"blueimp-load-image\";\nimport Plot from \"react-plotly.js\";\nimport { FileBlobOrURL } from \"../Types\";\nimport { conditionalExpression } from \"@babel/types\";\nimport generate from \"@babel/generator\";\n\ninterface Props {\n  imageFile: FileBlobOrURL;\n  onError: (errorMessage: string) => void;\n}\n\ninterface State {\n  x: number[];\n  y: number[];\n  z: number[];\n  colors: string[];\n}\nconst rgbToHSL = (r: number, g: number, b: number) => {\n  // https://css-tricks.com/converting-color-spaces-in-javascript/\n  // Make r, g, and b fractions of 1\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  // Find greatest and smallest channel values\n  const cmin = Math.min(r, g, b);\n  const cmax = Math.max(r, g, b);\n  const delta = cmax - cmin;\n  let h = 0;\n  let s = 0;\n  let l = 0;\n\n  // Calculate hue\n  // No difference\n  if (delta === 0) h = 0;\n  // Red is max\n  else if (cmax === r) h = ((g - b) / delta) % 6;\n  // Green is max\n  else if (cmax === g) h = (b - r) / delta + 2;\n  // Blue is max\n  else h = (r - g) / delta + 4;\n\n  h = h * 60;\n\n  // Make negative hues positive behind 360Â°\n  if (h < 0) h += 360;\n\n  // Calculate lightness\n  l = (cmax + cmin) / 2;\n\n  // Calculate saturation\n  s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n\n  return [h, s, l];\n};\n\nconst hslToRGB = (h: number, s: number, l: number) => {\n  const c = (1 - Math.abs(2 * l - 1)) * s;\n  const x = c * (1 - Math.abs(((h / 60) % 2) - 1));\n  const m = l - c / 2;\n  let r = 0;\n  let g = 0;\n  let b = 0;\n\n  h %= 360;\n  if (0 <= h && h < 60) {\n    r = c;\n    g = x;\n    b = 0;\n  } else if (60 <= h && h < 120) {\n    r = x;\n    g = c;\n    b = 0;\n  } else if (120 <= h && h < 180) {\n    r = 0;\n    g = c;\n    b = x;\n  } else if (180 <= h && h < 240) {\n    r = 0;\n    g = x;\n    b = c;\n  } else if (240 <= h && h < 300) {\n    r = x;\n    g = 0;\n    b = c;\n  } else if (300 <= h && h < 360) {\n    r = c;\n    g = 0;\n    b = x;\n  }\n  r = Math.round((r + m) * 255);\n  g = Math.round((g + m) * 255);\n  b = Math.round((b + m) * 255);\n\n  return [r, g, b];\n};\n\nconst hslToXYZ = (h: number, s: number, l: number) => {\n  const z = l - 0.5;\n  const angle = (h / 180) * Math.PI;\n  const radius = Math.sqrt(0.5 ** 2 - z ** 2) * s;\n  const x = Math.sin(angle) * radius;\n  const y = Math.cos(angle) * radius;\n  return [x, y, z];\n};\n\nconst generateHueGuideLine = () => {\n  const N_POINTS = 256;\n\n  const xs = [];\n  const ys = [];\n  const zs = [];\n  const cs = [];\n  for (let i = 0; i < N_POINTS; ++i) {\n    const h = (i / (N_POINTS - 1)) * 360;\n    const s = 1.0;\n    const l = 0.5;\n    const [r, g, b] = hslToRGB(h, s, l);\n    const [x, y, z] = hslToXYZ(h, s, l);\n    xs.push(x);\n    ys.push(y);\n    zs.push(z);\n    cs.push(`rgb(${r}, ${g}, ${b})`);\n  }\n  return [xs, ys, zs, cs];\n};\n\nclass HSLPlot extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      x: [],\n      y: [],\n      z: [],\n      colors: []\n    };\n\n    loadImage(\n      props.imageFile,\n      data => {\n        if (data instanceof Event) {\n          this.props.onError(\"Loading image file failed\");\n        } else if (data instanceof HTMLImageElement) {\n          alert(\"image!\");\n        } else {\n          this.analyzeImage(data);\n        }\n      },\n      {\n        maxWidth: 100,\n        maxHeight: 100,\n        canvas: true\n      }\n    );\n  }\n\n  analyzeImage(imageCanvas: HTMLCanvasElement) {\n    const ctx = imageCanvas.getContext(\"2d\");\n    if (ctx === null) {\n      alert(\"error\");\n      return;\n    }\n    const pixels = ctx.getImageData(0, 0, imageCanvas.width, imageCanvas.height)\n      .data;\n    const xs = [];\n    const ys = [];\n    const zs = [];\n    const colors = [];\n    for (let i = 0; i < pixels.length; i += 4) {\n      const [r, g, b] = [pixels[i], pixels[i + 1], pixels[i + 2]];\n      const [h, s, l] = rgbToHSL(r, g, b);\n      const [x, y, z] = hslToXYZ(h, s, l);\n      xs.push(x);\n      ys.push(y);\n      zs.push(z);\n\n      /*\n        xs.push(r);\n        ys.push(g);\n        zs.push(b);\n        */\n      colors.push(`rgb(${r}, ${g}, ${b})`);\n    }\n    this.setState({\n      x: xs,\n      y: ys,\n      z: zs,\n      colors\n    });\n  }\n\n  // https://codepen.io/nicolaskruchten/pen/ERgBZX\n  render() {\n    // TODO: bettern ame\n    const [xs, ys, zs, cs] = generateHueGuideLine();\n\n    if (this.state.x.length === 0) {\n      return (\n        <div className=\"d-flex justify-content-center\">\n          <div className=\"spinner-border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <Plot\n            data={[\n              {\n                x: this.state.x,\n                y: this.state.y,\n                z: this.state.z,\n                type: \"scatter3d\",\n                mode: \"markers\",\n                marker: { color: this.state.colors, size: 3 }\n              },\n              {\n                x: [0, 0],\n                y: [0, 0],\n                z: [-0.5, +0.5],\n                type: \"scatter3d\",\n                mode: \"lines\",\n                line: {\n                  color: \"rgb(200, 200, 200)\"\n                }\n              },\n              {\n                x: xs,\n                y: ys,\n                z: zs,\n                type: \"scatter3d\",\n                mode: \"lines\",\n                line: {\n                  color: cs\n                }\n              }\n            ]}\n            layout={{\n              showlegend: false,\n              scene: {\n                xaxis: { range: [-0.5, 0.5] },\n                yaxis: { range: [-0.5, 0.5] },\n                zaxis: { range: [-0.5, 0.5] },\n                aspectmode: \"cube\"\n              },\n              autosize: true,\n              margin: {\n                l: 0,\n                r: 0,\n                b: 0,\n                t: 0\n              }\n            }}\n            useResizeHandler={true}\n            style={{\n              width: \"100%\"\n            }}\n          />\n          c.f.{\" \"}\n          <a href=\"https://en.wikipedia.org/wiki/Color_solid\">color solid</a>\n        </div>\n      );\n    }\n  }\n}\n\nexport default HSLPlot;\n","import React from \"react\";\nimport bsCustomFileInput from \"bs-custom-file-input\";\n\nimport \"./App.css\";\nimport ImageSelection from \"./components/ImageSelection\";\nimport ImagePreview from \"./components/ImagePreview\";\nimport HSLPlot from \"./components/HSLPlot\";\nimport { FileBlobOrURL } from \"./Types\";\n\nconst NavBar = () => {\n  // view-source:https://bs-custom-file-input.netlify.com/\n  return (\n    <div className=\"App\">\n      <nav className=\"navbar navbar-expand navbar-dark bg-dark text-white\">\n        <div className=\"container\">\n          <h1 className=\"mb-0 h5 py-1\">Image Color 3D</h1>\n        </div>\n      </nav>\n    </div>\n  );\n};\n\ninterface State {\n  imageFile: FileBlobOrURL | null;\n  imageKey: number;\n  errorMessage: string | null;\n}\n\nclass App extends React.Component<{}, State> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      imageFile: null,\n      imageKey: 0,\n      errorMessage: null\n    };\n\n    this.handleImageChange = this.handleImageChange.bind(this);\n    this.handleError = this.handleError.bind(this);\n  }\n\n  componentDidMount() {\n    bsCustomFileInput.init();\n  }\n\n  handleImageChange(imageFile: FileBlobOrURL | null) {\n    if (imageFile === null) {\n      this.setState({\n        imageFile: null,\n        errorMessage: null\n      });\n      return;\n    }\n    this.setState({\n      imageFile,\n      imageKey: this.state.imageKey + 1,\n      errorMessage: null\n    });\n  }\n\n  handleError(errorMessage: string) {\n    this.setState({\n      errorMessage\n    });\n  }\n\n  render() {\n    let result;\n    if (this.state.errorMessage) {\n      result = (\n        <div className=\"alert alert-danger mt-5\" role=\"alert\">\n          {this.state.errorMessage}\n        </div>\n      );\n    } else if (this.state.imageFile) {\n      result = (\n        <div className=\"row mt-5\">\n          <div className=\"col-md-12 col-lg-6\">\n            <HSLPlot\n              key={this.state.imageKey}\n              imageFile={this.state.imageFile}\n              onError={this.handleError}\n            />\n          </div>\n          <div className=\"col-md-12 col-lg-6\">\n            <ImagePreview\n              key={this.state.imageKey}\n              imageFile={this.state.imageFile}\n              onError={this.handleError}\n            />\n          </div>\n        </div>\n      );\n    } else {\n      result = null;\n    }\n\n    return (\n      <div>\n        <NavBar />\n        <div className=\"container flex-grow-1 flex-shrink-0 mt-5\">\n          <div className=\"row\">\n            <div className=\"col-sm-12\">\n              <ImageSelection onChange={this.handleImageChange} />\n            </div>\n          </div>\n          {result}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}